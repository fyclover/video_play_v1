<?php

namespace app\home\controller\goods;

use app\common\model\Agent;
use app\common\model\OrderModel;
use app\common\model\PayRecharge;
use app\common\model\UserModel;
use app\common\model\Video;
use app\common\model\VideoUserSetValidityPeriod;
use app\common\model\VideoVipLevel;
use app\common\traites\PublicCrudTrait;
use app\home\controller\Base;
use app\home\controller\service\BranchService;
use app\home\controller\service\GoodsService;
use think\exception\ValidateException;
use think\facade\Db;
use think\facade\Request;

class Goods extends Base
{
    protected $model;
    protected $service;
    use PublicCrudTrait;

    /**
     * 获取商品
     */
    public function initialize()
    {
        $this->service = new GoodsService();
        parent::initialize(); // TODO: Change the autogenerated stub
    }

    //获取购买套餐 $type 1 视频套餐 2充值套餐
    public function level()
    {
        $type = $this->request->post('type/d', 1);
        $list = $this->service->video_level($type);
        return show($list);
    }

    //查询视频分类
//    public function video_type_list()
//    {
//        $find = $this->service->video_model()->video_type_list();
//        if (!$find)  return show([],config('ToConfig.http_code.error'),'没有该分类哦！');
//        return show($find);
//    }

    //视频播放 获取当前视频
    // 检测视频 是否 可以观看
    // *
    // 以下几种情况下是可以看片的
    // 1 单独购买某一影片(时间永久有效)
    // 2 全站(包天/包月/包年)购买(有效期累加)

    // 视频类型分为：
    // 1 套餐视频(套餐内视频也可以单独购买)
    // 2 非套餐视频(需要单独购买，支付单独购买价格，即使会员购买了套餐，也无法观看)
    //获取购买套餐 $type 1 视频套餐 2充值套餐
    public function video()
    {
        $videoId = $this->request->post('id/d', 0);
        if ($videoId <= 0) return show([], config('ToConfig.http_code.error'), '视频不存在或者没有查看权限');//视频ID错误

        $video = $this->service->get_and_check_user_video_details($videoId);
        if (!$video) return show([], config('ToConfig.http_code.error'), '视频不存在或者没有查看权限');
        return show($video);
    }

//    // 查看全部视频列表
//    public function video_all_list()
//    {
//        //获取视频列表
//        $list = $this->service->video_all_list();
//        if (!$list)  return show([],config('ToConfig.http_code.error'),'视频列表为空！暂无视频');
//        return show($list);
//    }

    //浏览历史
    public function video_browse_list()
    {
        //获取视频列表
        $list = $this->service->video_browse_list();
        if (!$list) return show([], config('ToConfig.http_code.error'), '视频列表为空！暂无视频');
        return show($list);
    }

    // 播放页面 列表 | 这个版本是 为了可以 上下 滑动的 那种
    public function video_play_list()
    {
        //查询用户购买的套餐
        $user_video_level = $this->service->user_video_level();
        if (!$user_video_level) {
            //查询购买的单视频
            $alone_list = $this->service->alone_list();
            //存在已经购买的视频
            if (!empty($alone_list)) {
                return show($alone_list);
            }
            return show([], config('ToConfig.http_code.error'), '没有已经购买的视频哦！');
        }

        if (!$user_video_level && empty($alone_list)) return show([], config('ToConfig.http_code.error'), '没有已经购买的视频哦！');
        //获取视频列表
        $list = $this->service->user_video_list($this->request, $user_video_level);
        if (!$list) return show([], config('ToConfig.http_code.error'), '视频不存在或者没有查看权限');
        // 返回信息
        return show($list);
    }

    // 查看热门视频列表
    public function video_hot_list()
    {
        //获取视频列表
        $list = $this->service->video_hot_list();
        if (!$list) return show([], config('ToConfig.http_code.error'), '没有视频哦！');
        return show($list);
    }

    // 已购套餐内的视频列表
    public function video_set_buy_list()
    {
        //获取视频列表
        $list = $this->service->video_set_list();
        if (!$list) return show([], config('ToConfig.http_code.error'), '没有视频哦！');
        return show($list);
    }

    // 已购 单片列表
    public function video_alone_list()
    {
        $find = $this->service->alone_list();
        return show($find);
    }

    //购买套餐
    public function purchase_set_video()
    {
        //获取套餐信息
        $bool = $this->service->purchase_video_set();
        if ($bool['code'] != 1) return show([], config('ToConfig.http_code.error'), $bool['msg']);
        //购买成功
        return show();
    }


    //视频单独购买
    public function purchase_alone_video()
    {
        //视频id
        $find = $this->service->alone_video_purchase();
        if ($find['code'] != 1) return show([], config('ToConfig.http_code.error'), $find['msg']);
        return show();
    }


    // 通过 第四方 通道充值了
    //充值 暂时废弃了 
    public function recharge()
    {
        $price = $this->request->post('price/d', 0);
        if ($price <= 0) return show([], config('ToConfig.http_code.error'), '充值金额错误');
        $user = session('home_user');
        //生成充值订单
        $save = $this->service->recharge_user($user, $price);
        if ($save['code'] == 0) return show([], config('ToConfig.http_code.error'), $save['msg']);
        //发起付款
        $res = $this->service->recharge_price($save['recharge_id'], $price);
        //0 是失败
        if ($res['code'] == 0) return show([], config('ToConfig.http_code.error'), $res['msg']);
        //充值成功，分配分销奖励
        $BranchService = new BranchService();
        $money_log = $BranchService->branch(session('home_user'), ['price' => $price, 'order_id' => $res['order_id']], 403);
        if (!$money_log) return show([], config('ToConfig.http_code.error'), $money_log['msg']);
        return show();
    }

    //已经购买的套餐
    public function validity_period_info()
    {
        $home_user_id = session('home_user.id');
        $find = VideoUserSetValidityPeriod::where('uid', $home_user_id)->order('id desc')->find();
        if (empty($find)) {
            return show();
        }

        $timestamp1 = strtotime($find->end_time);
        $timestamp2 = time();


        if ($timestamp1 <= $timestamp2) {
            return show();
        }

        return show($find);
    }

    //U币充值
    public function u_money()
    {
        $post = $this->request->post();

        if (!isset($post['goods_id']) || $post['goods_id'] <= 0) {
            return show([], config('ToConfig.http_code.error'), '商品ID错误');
        }

        if (!isset($post['pay_price']) || $post['pay_price'] <= 0) {
            return show([], config('ToConfig.http_code.error'), '数量错误');
        }

        if (!isset($post['u_image']) || empty($post['u_image'])) {
            return show([], config('ToConfig.http_code.error'), '截图不存在');
        }

        //生成订单号。
        $code = orderCode();
        //查询当前商品价格。并生成订单号。发送支付 到订单平台
        //$find = (new VideoVipLevel())->find($post['goods_id']);
        //if (!$find) return show([],config('ToConfig.http_code.error'),'商品不存在');;
        //$find = $find->toArray();

        $order_user = [
            'uid' => session('home_user.id'),
            'create_time' => date('Y-m-d H:i:s'),
            //'success_time' => date('Y-m-d H:i:s'),
            'money' => $post['pay_price'],//充 U币数量
            'admin_uid' => 0,
            'u_ip' => $_SERVER['REMOTE_ADDR'],
            'order_no' => $code,
            'status' => 0,
            'market_uid' => session('home_user.market_uid'),
            'u_image' => $post['u_image'],
        ];
        $model = new PayRecharge();
        $save = $model->save($order_user);
        if ($save) return show([]);
        return show([], config('ToConfig.http_code.error'), '充值失败');
    }


    //打赏
    public function reward()
    {
        $money = $this->request->post('money');
        if ($money <= 0) {
            return show([], config('ToConfig.http_code.error'), '金币数量错误');
        }

        $video_id = $this->request->post('video_id');
        if ($video_id <= 0) {
            return show([], config('ToConfig.http_code.error'), '视频ID错误');
        }

        //通过视频ID 获取博主ID
        $video_info = (new Video())->where('id', $video_id)->find();
        if (empty($video_info)){
            return show([], config('ToConfig.http_code.error'), '视频不存在');
        }
        $home_user = session('home_user');
        event('RepeatPurchase', ['repeat' => true, 'id' => $home_user['id'], 'second' => 2]);
        //查询用余额

        //余额够直接扣除
        $money_balance = $home_user['money_balance'] - $money;
        if ($money_balance <= 0) {
            return show([], config('ToConfig.http_code.error'), '余额不够。请充值');
        }
        $bz_id = $video_info['admin_uid'];
        $Agent = (new UserModel())->where('id', $bz_id)->find();
        //写入消费日志



        Db::startTrans();
        try {
            (new UserModel())->where('id', $home_user['id'])->dec('money_balance', $money)->update();
            (new UserModel())->where('id', $bz_id)->inc('money_balance', $money)->update();
            (new Video())->where('id', $video_id)->inc('video_money', $money)->update();

            //写操作日志
            (new \app\common\model\MoneyLog())->insert([
                'create_time' => date('Y-m-d H:i:s'),
                'type' => 2,
                'status' => 901,//打赏
                'money_before' => $home_user['money_balance'],
                'money_end' => $home_user['money_balance'] - $money,
                'money' => $money,
                'uid' => $home_user['id'],
                'market_uid' => $home_user['market_uid'],
                'source_id' => $video_id,
                'mark' => '打赏会员'
            ]);
            //写操作日志
            (new \app\common\model\MoneyLog())->insert([
                'create_time' => date('Y-m-d H:i:s'),
                'type' => 1,
                'status' => 2001,//主播获得打赏
                'money_before' => $Agent['money_balance'],
                'money_end' => $Agent['money_balance'] + $money,
                'money' => $money,
                'uid' => $bz_id,
                'market_uid' => 0,
                'source_id' => $video_id,
                'mark' => '主播获得打赏'
            ]);
            Db::commit();
        } catch (ValidateException $e) {
            Db::rollback();
            // 验证失败 输出错误信息
            return show([], config('ToConfig.http_code.error'), $e->getError());
        }
        show([]);
    }

    //关注博主
    public function pour(){
        $bz_id = $this->request->post('bz_id');
        if ($bz_id <= 0) {
            return show([], config('ToConfig.http_code.error'), '博主ID错误');
        }
        $bz_name = $this->request->post('bz_name');
        if (env($bz_name)) {
            return show([], config('ToConfig.http_code.error'), '博主名称错误');
        }

        $home_user = session('home_user');
        if (Db::name('common_user_pour')->where(['uid'=>$home_user['id'],'bz_id'=>$bz_id])->count('gid') >0){
            Db::name('common_user_pour')->where(['uid'=>$home_user['id'],'bz_id'=>$bz_id])->delete();
            $is_user_pour = 0;
        }else{
            $is_user_pour = 1;
            Db::name('common_user_pour')->insert(['uid'=>$home_user['id'],'bz_name'=>$bz_name,'bz_id'=>$bz_id,'create_time'=>date('Y-m-d H:i:s')]);
        }
        return show(['is_user_pour'=>$is_user_pour]);
    }



// 类结束了
}